# Generated from pt.isep.cms.client.ShowcaseShellShowcaseShellUiBinderImplGenMessages
# for locale en

categoryAbout=About

categoryCells=Cell Widgets

categoryEntities=Entities

categoryI18N=Internationalization

categoryLists=Lists and Menus

categoryOther=Other Features

categoryPanels=Panels

categoryPopups=Popups

categoryServices=Services

categoryTables=Tables

categoryTextInput=Text Input

categoryWidgets=Widgets

contactDatabaseCategories=Family,Friends,Coworkers,Businesses,Contacts

contactInfoFormAddress=Address\:

contactInfoFormBirthday=Birthday\:

contactInfoFormCategory=Category\:

contactInfoFormCreateButton=Create Contact

contactInfoFormFirstName=First Name\:

contactInfoFormLastName=Last Name\:

contactInfoFormTitle=Contact Info

contactInfoFormUpdateButton=Update Contact

contentWidgetExample=Example

contentWidgetSource=Source Code

contentWidgetStyle=CSS Style

cwAbsolutePanelClickMe=Click Me\!

cwAbsolutePanelDescription=An absolute panel positions all of its children absolutely, allowing them to overlap.

cwAbsolutePanelHelloWorld=Hello World

cwAbsolutePanelItemsToMove=<b>Items to move\:</b>

cwAbsolutePanelLeft=<b>Left\:</b>

cwAbsolutePanelName=Absolute Panel

cwAbsolutePanelTop=<b>Top\:</b>

cwAbsolutePanelWidgetNames=Hello World, Button, Grid

cwAddContactDialogCaption=Add Contact 

cwAnimationCancel=Cancel

cwAnimationDescription=Animate your application with timed effects.

cwAnimationName=Animations

cwAnimationOptions=Animation Options

cwAnimationStart=Start

cwBasicButtonClickMessage=Stop poking me\!

cwBasicButtonDescription=Basic button widgets

cwBasicButtonDisabled=Disabled Button

cwBasicButtonName=Basic Button

cwBasicButtonNormal=Normal Button

cwBasicPopupClickOutsideInstructions=Click anywhere outside this popup to make it disappear.

cwBasicPopupDescription=GWT provides the framework to create a custom popup.

cwBasicPopupInstructions=<b>Click an image to see full size\:</b>

cwBasicPopupName=Basic Popup

cwBasicPopupShowButton=Show Basic Popup

cwBasicTextAreaLabel=<b>Text area\:</b>

cwBasicTextDescription=GWT includes the standard complement of text-entry widgets, each of which supports keyboard and selection events you can use to control text entry. In particular, notice that the selection range for each widget is updated whenever you press a key.

cwBasicTextName=Basic Text

cwBasicTextNormalLabel=<b>Normal text box\:</b>

cwBasicTextPasswordLabel=<b>Password text box\:</b>

cwBasicTextReadOnly=read only

cwBasicTextSelected=Selected

cwBidiFormattingArg0Label=<b>Argument {0}\:</b>

cwBidiFormattingArg1Label=<b>Argument {1}\:</b>

cwBidiFormattingArg2Label=<b>Argument {2}\:</b>

cwBidiFormattingBidiFormattedLabel=<b>Message formatted with BidiFormatter\:</b>

cwBidiFormattingDescription=Class BidiFormatter contains methods to protect a string (for example, a Hebrew topic name) from being garbled and/or garbling what follows it when displayed in the opposite-direction context (for example, an English UI).

cwBidiFormattingLinkText=This example interacts with the sample interface\:

cwBidiFormattingName=Bidirectional Text Formatting

cwBidiFormattingNonbidiFormattedLabel=<b>Message formatted without BidiFormatter\:</b>

cwBidiFormattingTemplateLabel=<b>Message template\:</b>

cwBidiInputBidiAreaLabel=<b>The following TextArea has the default direction estimator in effect, and is thus bidi-aware. Check it by replacing the right-to-left text with some English, e.g. the sample strings above\:</b>

cwBidiInputDescription=The TextBox and TextArea widgets implement the HasDirectionEstimator interface. With a direction estimator defined, these widgets adjust their direction automatically according to the text entered so far. A direction estimator is defined by default when at least one of the application's locales is right-to-left.

cwBidiInputName=Bidirectional Text Input

cwBidiInputRtlAreaLabel=Without a direction estimator, the widget's direction is unaffected by the value the user types in. This makes the entry of opposite-direction text confusing and inconvenient.<br><b>Try typing "(212) 765 4321" or "Hi, how are you?" into the following right-to-left TextArea (which had the direction estimator turned off)\:</b>

cwCellBrowserDescription=Browser through dynamic data using the CellBrowser.

cwCellBrowserName=Cell Browser

cwCellBrowserSelected=Selected\:

cwCellListDescription=Render a large, custom list quickly using CellList.

cwCellListGenerateButton=Generate 50 Contacts

cwCellListName=Cell List

cwCellSampleCommitButton=Commit Changes

cwCellSampleRedrawButton=Redraw Table

cwCellSamplerDescription=The table below contains an example of most Cells provided in the API. Editable cells remember changes between table redraws until the changes are committed.

cwCellSamplerName=Cell Sampler

cwCellTableColumnAddress=Address

cwCellTableColumnCategory=Category

cwCellTableColumnFirstName=First Name

cwCellTableColumnLastName=Last Name

cwCellTableDescription=Do you want to display large amounts of data in your application? Use CellTable to render large tables quickly.

cwCellTableName=Cell Table

cwCellTreeDescription=Render large trees dynamically using CellTree.

cwCellTreeName=Cell Tree

cwCellTreeSelected=Selected\:

cwCellValidationColumnAddress=Address

cwCellValidationColumnName=Name

cwCellValidationDescription=Validate user data as they enter it using cell validation techniques. Cells will maintain their edited state until you confirm the change. The fields below turn blue while the address is validated, then turn red if the address is invalid.

cwCellValidationError=ERROR\: Address must be of the form\: \#\#\# &lt;street name&gt;

cwCellValidationName=Cell Validation

cwCheckBoxCheckAll=<b>Check all days that you are available\:</b>

cwCheckBoxDays=Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday

cwCheckBoxDescription=Basic Checkbox Widgets

cwCheckBoxName=Checkbox

cwConstantsExampleDescription=Interface Constants makes it possible to localize strings, numbers, and maps of strings onto strings. This example isn't terribly exciting, but it does demonstrate how to localize constants. The labels and color choices below are provided by the localized implementation of the sample interface ExampleConstants.

cwConstantsExampleLinkText=This example interacts with the sample interface\:

cwConstantsExampleName=Constants

cwConstantsWithLookupExampleDescription=Interface ConstantsWithLookup makes it possible to dynamically look up localized values using method names as string keys.

cwConstantsWithLookupExampleLinkText=This example interacts with the sample interface\:

cwConstantsWithLookupExampleMethodName=<b>Name of method\:</b>

cwConstantsWithLookupExampleName=Constants With Lookup

cwConstantsWithLookupExampleNoInput=<Please enter a method name above>

cwConstantsWithLookupExampleNoMatches=<Not found>

cwConstantsWithLookupExampleResults=<b>Lookup results\:</b>

cwContactsDescription=Manage Contacts

cwContactsName=Contacts

cwCookiesDeleteCookie=Delete

cwCookiesDescription=Track users with ease and save data on the client side using cookies.

cwCookiesExistingLabel=<b>Existing Cookies\:</b>

cwCookiesInvalidCookie=You must specify a cookie name

cwCookiesName=Cookies

cwCookiesNameLabel=<b>Name\:</b>

cwCookiesSetCookie=Set Cookie

cwCookiesValueLabel=<b>Value\:</b>

cwCustomButtonDescription=PushButtons and ToggleButtons allow you to customize the look of your buttons

cwCustomButtonName=Custom Button

cwCustomButtonPush=<b>Push Buttons\:</b>

cwCustomButtonToggle=<b>Toggle Buttons\:</b>

cwCustomDataGridColumnAddress=Address

cwCustomDataGridColumnAge=Age

cwCustomDataGridColumnCategory=Category

cwCustomDataGridColumnFirstName=First Name

cwCustomDataGridColumnLastName=Last Name

cwCustomDataGridDescription=Customize the structure of a DataGrid with expandable rows or messages that span the width table.

cwCustomDataGridEmpty=There is no data to display

cwCustomDataGridName=Custom Data Grid

cwDataGridColumnAddress=Address

cwDataGridColumnAge=Age

cwDataGridColumnCategory=Category

cwDataGridColumnFirstName=First Name

cwDataGridColumnLastName=Last Name

cwDataGridDescription=Use DataGrid to render large amounts of data in your enterprise application. DataGrid has a fixed header and footer, with a scrollable content area.

cwDataGridEmpty=There is no data to display

cwDataGridName=Data Grid

cwDatePickerBoxLabel=<br><br><br><b>DateBox with popup DatePicker\:</b>

cwDatePickerDescription=Let users select a date using the DatePicker.

cwDatePickerLabel=<b>Permanent DatePicker\:</b>

cwDatePickerName=Date Picker

cwDateTimeFormatDescription=Class DateTimeFormat supports locale-sensitive formatting and parsing of date and time values, like NumberFormat, using a flexible pattern-based syntax. Both custom patterns and standard patterns are supported.

cwDateTimeFormatFailedToParseInput=Unable to parse input

cwDateTimeFormatFormattedLabel=<b>Formatted value\:</b>

cwDateTimeFormatInvalidPattern=Invalid pattern

cwDateTimeFormatName=Date Time Format

cwDateTimeFormatPatternLabel=<b>Pattern\:</b>

cwDateTimeFormatPatterns=Full Date/Time, Long Date/Time, Medium Date/Time, Short Date/Time, Full Date, Long Date, Medium Date, Short Date, Full Time, Long Time, Medium Time, Short Time, Custom

cwDateTimeFormatValueLabel=<b>Value to format\:</b>

cwDecoratorPanelDescription=Add rounded corners to any Widget using the Decorator Panel.

cwDecoratorPanelFormDescription=Description\:

cwDecoratorPanelFormName=Name\:

cwDecoratorPanelFormTitle=Enter Search Criteria

cwDecoratorPanelName=Decorator Panel

cwDialogBoxCaption=Sample DialogBox

cwDialogBoxClose=Close

cwDialogBoxDescription=The draggable DialogBox resembles a window and includes a title bar.  You can adjust to opacity to allow some of the background to show through the popup.

cwDialogBoxDetails=This is an example of a standard dialog box component.

cwDialogBoxItem=item

cwDialogBoxListBoxInfo=This list box demonstrates that you can drag the popup over it. This obscure corner case renders incorrectly for many other libraries.

cwDialogBoxMakeTransparent=Make Translucent

cwDialogBoxName=Dialog Box

cwDialogBoxShowButton=Show Dialog Box

cwDictionaryExampleDescription=Using the Dictionary class, you can lookup localized values within JavaScript objects defined in the host HTML page rather than compiling them into your GWT code. This is useful if your translations change frequently, because your HTML server can emit updated translations into the host page HTML as often as needed. It can also a useful way to integrate a GWT module with existing localized web applications. Note that a dictionary's values depend only on the host page HTML and are not influenced by the GWT locale client property. For this example, the JavaScript variable declaration appears in the source for this HTML page.

cwDictionaryExampleLinkText=<b>This example interacts with the following JavaScript variable\:</b>

cwDictionaryExampleName=Dictionary

cwDisclosurePanelDescription=A Disclosure Panel will show or hide its contents when the user clicks on the header text.  The contents can be simple text, or any Widget, such as an image or advanced options in a form.

cwDisclosurePanelFormAdvancedCriteria=Advanced Criteria

cwDisclosurePanelFormDescription=Description\:

cwDisclosurePanelFormGender=Gender\:

cwDisclosurePanelFormGenderOptions=male, female

cwDisclosurePanelFormLocation=Location\:

cwDisclosurePanelFormName=Name\:

cwDisclosurePanelFormTitle=<b>Enter Search Criteria</b>

cwDisclosurePanelName=Disclosure Panel

cwDockPanelCenter=This is a <code>ScrollPanel</code> contained at the center of a <code>DockPanel</code>.  By putting some fairly large contents in the middle and setting its size explicitly, it becomes a scrollable area within the page, but without requiring the use of an IFRAME.<br><br>Here's quite a bit more meaningless text that will serve primarily to make this thing scroll off the bottom of its visible area.  Otherwise, you might have to make it really, really small in order to see the nifty scroll bars\!

cwDockPanelDescription=A Dock Panel aligns its content using compass directions.

cwDockPanelEast=This is the east component

cwDockPanelName=Dock Panel

cwDockPanelNorth1=This is the first north component

cwDockPanelNorth2=This is the second north component

cwDockPanelSouth1=This is the first south component

cwDockPanelSouth2=This is the second south component

cwDockPanelWest=This is the west component

cwFileUploadButton=Upload File

cwFileUploadDescription=Upload files asynchronously using AJAX file uploads.

cwFileUploadName=File Upload

cwFileUploadNoFileError=You must select a file to upload

cwFileUploadSelectFile=<b>Select a file\:</b>

cwFileUploadSuccessful=File uploaded\!

cwFlexTableAddRow=Add a row

cwFlexTableDescription=The Flex Table supports row spans and column spans, allowing you to layout data in a variety of ways.

cwFlexTableDetails=This is a FlexTable that supports <B>colspans</B> and <B>rowspans</B>.  You can use it to format your page or as a special purpose table.

cwFlexTableName=Flex Table

cwFlexTableRemoveRow=Remove a row

cwFlowPanelDescription=A Flow Panel lets its content flow naturally.

cwFlowPanelItem=Item

cwFlowPanelName=Flow Panel

cwFrameDescription=Embed content from other sites into your page using the Frame, a wrapper around an IFRAME element.

cwFrameName=Frames

cwFrameSetLocation=Set Location

cwGridDescription=A simple grid

cwGridName=Grid

cwHorizontalPanelButton=Button

cwHorizontalPanelDescription=A Horizontal Panel aligns its content horizontally without allowing it to wrap.  Resize the page to see how the content maintains its horizontal alignment.

cwHorizontalPanelName=Horizontal Panel

cwHyperlinkChoose=<b>Choose a section\:</b>

cwHyperlinkDescription=Embed your page with Hyperlinks to navigate to different sections.  Hyperlinks create history tokens, allowing users to return to a previous state using the browser back button.

cwHyperlinkName=Hyperlink

cwListBoxCars=compact, sedan, coupe, convertible, SUV, truck

cwListBoxCategories=Cars, Sports, Vacation Spots

cwListBoxDescription=Built-in selection box and drop down lists

cwListBoxName=List Box

cwListBoxSelectAll=<b>Select all that apply\:</b>

cwListBoxSelectCategory=<b>Select a category\:</b>

cwListBoxSports=Baseball, Basketball, Football, Hockey, Lacrosse, Polo, Soccer, Softball, Water Polo

cwListBoxVacations=Carribean, Grand Canyon, Paris, Italy, New York, Las Vegas

cwMenuBarDescription=The Menu Bar can be used to navigate through many options.  It also supports nested sub menus.

cwMenuBarEditCategory=Edit

cwMenuBarEditOptions=Undo, Redo, Cut, Copy, Paste

cwMenuBarFileCategory=File

cwMenuBarFileOptions=New, Open, Close, Recent, Exit

cwMenuBarFileRecents=Fishing in the desert.txt, How to tame a wild parrot, Idiots Guide to Emu Farms

cwMenuBarGWTOptions=Download, Examples, Source Code, GWT wit' the program

cwMenuBarHelpCategory=Help

cwMenuBarHelpOptions=Contents, Fortune Cookie, About GWT

cwMenuBarName=Menu Bar

cwMenuBarPrompts=Thank you for selecting a menu item, A fine selection indeed, Don't you have anything better to do than select menu items?, Try something else, this is just a menu\!, Another wasted click

cwMessagesExampleArg0Label=<b>Argument {0}\:</b>

cwMessagesExampleArg1Label=<b>Argument {1}\:</b>

cwMessagesExampleArg2Label=<b>Argument {2}\:</b>

cwMessagesExampleDescription=Interface Messages provides a way to create strongly-typed parameterized messages that are checked for correctness during compilation.

cwMessagesExampleFormattedLabel=<b>Formatted message\:</b>

cwMessagesExampleLinkText=This example interacts with the sample interface\:

cwMessagesExampleName=Messages

cwMessagesExampleTemplateLabel=<b>Message template\:</b>

cwNumberFormatDescription=Class NumberFormat supports locale-sensitive formatting and parsing of numbers using a flexible pattern-based syntax. In addition to custom patterns, several standard patterns are also available for convenience.

cwNumberFormatFailedToParseInput=Unable to parse input

cwNumberFormatFormattedLabel=<b>Formatted value\:</b>

cwNumberFormatInvalidPattern=Invalid pattern

cwNumberFormatName=Number Format

cwNumberFormatPatternLabel=<b>Pattern\:</b>

cwNumberFormatPatterns=Decimal, Currency, Scientific, Percent, Custom

cwNumberFormatValueLabel=<b>Value to format\:</b>

cwPluralFormsExampleArg0Label=<b>Argument {0}\:</b>

cwPluralFormsExampleDescription=Plural Forms provide a way to create message translations that depend on the count of something.

cwPluralFormsExampleFormattedLabel=<b>Formatted message\:</b>

cwPluralFormsExampleLinkText=This example interacts with the sample interface\:

cwPluralFormsExampleName=Plural Forms

cwRadioButtonColors=blue, red, yellow, green

cwRadioButtonDescription=Basic RadioButton Widget

cwRadioButtonName=Radio Button

cwRadioButtonSelectColor=<b>Select your favorite color\:</b>

cwRadioButtonSelectSport=<b>Select your favorite sport\:</b>

cwRadioButtonSports=Baseball, Basketball, Football, Hockey, Soccer, Water Polo

cwRichTextDescription=The Rich Text Area is supported on all major browsers, and will fall back gracefully to the level of functionality supported on each.

cwRichTextName=Rich Text

cwSplitLayoutPanelCenter=This is some text to show how the contents on either side of the splitter flow.

cwSplitLayoutPanelDescription=Give users the freedom to decide how to allocate space using this split panel.

cwSplitLayoutPanelEast=This is the east component.

cwSplitLayoutPanelName=Split Layout Panel

cwSplitLayoutPanelNorth1=This is the first north component.

cwSplitLayoutPanelNorth2=This is the second north component.

cwSplitLayoutPanelSouth1=This is the first south component.

cwSplitLayoutPanelSouth2=This is the second south component.

cwSplitLayoutPanelWest=This is the west component.

cwStackLayoutPanelContacts=Benoit Mandelbrot, Albert Einstein, Rene Descartes, Bob Saget, Ludwig von Beethoven, Richard Feynman, Alan Turing, John von Neumann

cwStackLayoutPanelContactsEmails=benoit@example.com, albert@example.com, rene@example.com, bob@example.com, ludwig@example.com, richard@example.com, alan@example.com, john@example.com

cwStackLayoutPanelContactsHeader=Contacts

cwStackLayoutPanelDescription=The StackLayoutPanel stacks its children vertically, displaying only one at a time, with a header for each child which the user can click to display.  This is useful for vertical menu systems.

cwStackLayoutPanelFilters=All, Starred, Read, Unread, Recent, Sent by me

cwStackLayoutPanelFiltersHeader=Filters

cwStackLayoutPanelMailFolders=Inbox, Drafts, Templates, Sent, Trash

cwStackLayoutPanelMailHeader=Mail

cwStackLayoutPanelName=Stack Layout Panel

cwStackPanelContacts=Benoit Mandelbrot, Albert Einstein, Rene Descartes, Bob Saget, Ludwig von Beethoven, Richard Feynman, Alan Turing, John von Neumann

cwStackPanelContactsEmails=benoit@example.com, albert@example.com, rene@example.com, bob@example.com, ludwig@example.com, richard@example.com, alan@example.com, john@example.com

cwStackPanelContactsHeader=Contacts

cwStackPanelDescription=The StackPanel stacks its children vertically, displaying only one at a time, with a header for each child which the user can click to display.  This is useful for vertical menu systems.

cwStackPanelFilters=All, Starred, Read, Unread, Recent, Sent by me

cwStackPanelFiltersHeader=Filters

cwStackPanelMailFolders=Inbox, Drafts, Templates, Sent, Trash

cwStackPanelMailHeader=Mail

cwStackPanelName=Stack Panel

cwSuggestBoxDescription=Generate suggestions via RPC calls to the server or static data on the page

cwSuggestBoxLabel=<b>Choose a word\:</b>

cwSuggestBoxName=Suggest Box

cwSuggestBoxWords=1337, apple, about, ant, bruce, banana, bobv, canada, coconut, compiler, donut, deferred binding, dessert topping, eclair, ecc, frog attack, floor wax, fitz, google, gosh, gwt, hollis, haskell, hammer, in the flinks, internets, ipso facto, jat, jgw, java, jens, knorton, kaitlyn, kangaroo, la grange, lars, love, morrildl, max, maddie, mloofle, mmendez, nail, narnia, null, optimizations, obfuscation, original, ping pong, polymorphic, pleather, quotidian, quality, qu'est-ce que c'est, ready state, ruby, rdayal, subversion, superclass, scottb, tobyr, the dans, ~ tilde, undefined, unit tests, under 100ms, vtbl, vidalia, vector graphics, w3c, web experience, work around, w00t\!, xml, xargs, xeno, yacc, yank (the vi command), zealot, zoe, zebra

cwTabPanelDescription=Divide content over multiple tabs.

cwTabPanelName=Tab Layout Panel

cwTabPanelTab0=Click one of the tabs to see more content.

cwTabPanelTab2=Tabs are highly customizable using CSS.

cwTabPanelTabs=Home, GWT Logo, More Info

cwTreeBeethovenWorkConcertos=No. 1 - C, No. 2 - B-Flat Major, No. 3 - C Minor, No. 4 - G Major, No. 5 - E-Flat Major

cwTreeBeethovenWorkQuartets=Six String Quartets, Three String Quartets, Grosse Fugue for String Quartets

cwTreeBeethovenWorkSonatas=Sonata in A Minor, Sonata in F Major

cwTreeBeethovenWorkSymphonies=No. 2 - D Major, No. 2 - D Major, No. 3 - E-Flat Major, No. 4 - B-Flat Major, No. 5 - C Minor, No. 6 - F Major, No. 7 - A Major, No. 8 - F Major, No. 9 - D Minor

cwTreeBrahmsWorkConcertos=Violin Concerto, Double Concerto - A Minor, Piano Concerto No. 1 - D Minor, Piano Concerto No. 2 - B-Flat Major

cwTreeBrahmsWorkQuartets=Piano Quartet No. 1 - G Minor, Piano Quartet No. 2 - A Major, Piano Quartet No. 3 - C Minor, String Quartet No. 3 - B-Flat Minor

cwTreeBrahmsWorkSonatas=Two Sonatas for Clarinet - F Minor, Two Sonatas for Clarinet - E-Flat Major

cwTreeBrahmsWorkSymphonies=No. 1 - C Minor, No. 2 - D Minor, No. 3 - F Major, No. 4 - E Minor

cwTreeComposers=Beethoven, Brahms, Mozart

cwTreeConcertos=Concertos

cwTreeDescription=Dynamic Tree Widget supports lazy loading of data via RPC calls to the server

cwTreeDynamicLabel=<b>Dynamic Tree\:</b>

cwTreeItem=Item

cwTreeMozartWorkConcertos=Piano Concerto No. 12, Piano Concerto No. 17, Clarinet Concerto, Violin Concerto No. 5, Violin Concerto No. 4

cwTreeName=Tree

cwTreeQuartets=Quartets

cwTreeSonatas=Sonatas

cwTreeStaticLabel=<b>Static Tree\:</b>

cwTreeSymphonies=Symphonies

cwUpdateContactDialogCaption=Update Contact 

cwVerticalPanelButton=Button

cwVerticalPanelDescription=A Vertical Panel aligns its content vertically without allowing it to wrap.  Resize the page to see how the content maintains its vertical alignment.

cwVerticalPanelName=Vertical Panel

mainLinkExamples=More Examples

mainLinkHomepage=This is a GWT Project

mainMenuTitle=GWT Examples

mainSubTitle=Project Application for ODSOFT and EDOM

mainTitle=College Management System
